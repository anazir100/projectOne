[{"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\index.tsx":"1","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\reducer.ts":"3","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\App.tsx":"4","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\actions.ts":"5","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\user\\user.ts":"6","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\claim.ts":"7","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\user\\user.service.ts":"8","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\routing.component.tsx":"9","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\claimclass.component.tsx":"10","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\claim.service.ts":"11","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\user\\login.component.tsx":"12","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\table.component.tsx":"13","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\error.component.tsx":"14","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\add-claim.component.tsx":"15","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\claimdetail.component.tsx":"16","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\thunks.ts":"17","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\claim-row.tsx":"18","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\claim.component.tsx":"19","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\about.component.tsx":"20","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\approve-claim.component.tsx":"21","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\update-claim.component.tsx":"22"},{"size":875,"mtime":1611027427462,"results":"23","hashOfConfig":"24"},{"size":440,"mtime":1610927428502,"results":"25","hashOfConfig":"24"},{"size":1905,"mtime":1611030328951,"results":"26","hashOfConfig":"24"},{"size":1336,"mtime":1611030491109,"results":"27","hashOfConfig":"24"},{"size":1349,"mtime":1611030527990,"results":"28","hashOfConfig":"24"},{"size":78,"mtime":1610927428502,"results":"29","hashOfConfig":"24"},{"size":548,"mtime":1611027672790,"results":"30","hashOfConfig":"24"},{"size":804,"mtime":1610927428502,"results":"31","hashOfConfig":"24"},{"size":3608,"mtime":1611027351024,"results":"32","hashOfConfig":"24"},{"size":1660,"mtime":1611031056631,"results":"33","hashOfConfig":"24"},{"size":908,"mtime":1610927428486,"results":"34","hashOfConfig":"24"},{"size":1512,"mtime":1611032661573,"results":"35","hashOfConfig":"24"},{"size":1335,"mtime":1610927428486,"results":"36","hashOfConfig":"24"},{"size":1943,"mtime":1611030472931,"results":"37","hashOfConfig":"24"},{"size":2964,"mtime":1611094120449,"results":"38","hashOfConfig":"24"},{"size":3299,"mtime":1611095170866,"results":"39","hashOfConfig":"24"},{"size":484,"mtime":1610927428502,"results":"40","hashOfConfig":"24"},{"size":488,"mtime":1611030930814,"results":"41","hashOfConfig":"24"},{"size":2108,"mtime":1611104812689,"results":"42","hashOfConfig":"24"},{"size":775,"mtime":1611032394578,"results":"43","hashOfConfig":"24"},{"size":3553,"mtime":1611103857760,"results":"44","hashOfConfig":"24"},{"size":2783,"mtime":1611103267567,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1kaqeub",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"48"},"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\index.tsx",[],["96","97"],"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\reducer.ts",[],"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\App.tsx",["98"],"import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport ClaimClassComponent from './claim/claimclass.component';\r\nimport RouterComponent from './routing.component';\r\nimport userService from './user/user.service';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getUser } from './actions';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nfunction App() {\r\n    /* useState: A hook that can create a variable and a \r\n      setter to add to the state of the application and modify\r\n      that state to trigger a render.*/\r\n    const [cond, setCond] = useState(true);\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        userService.getLogin().then((user) => {\r\n            console.log(user);\r\n            dispatch(getUser(user));\r\n        });\r\n    }, [dispatch]);\r\n\r\n    return (\r\n            <div className='container'>\r\n                {/* {'user'+user?.name} */}\r\n                \r\n                <BrowserRouter>\r\n                    <RouterComponent></RouterComponent>\r\n                </BrowserRouter>\r\n                {cond ? (\r\n                    <ClaimClassComponent\r\n                        which={1}\r\n                    ></ClaimClassComponent>\r\n                ) : (\r\n                    ''\r\n                )}\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\actions.ts",[],"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\user\\user.ts",[],"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\claim.ts",["99"],"export class Claim {\r\n    id: number = 0;\r\n    name: string = '';\r\n    event_type: string = '';\r\n    claim_date: any;\r\n    event_start_date: any;\r\n    location: string = '';\r\n    description: string = '';\r\n    cost: number = 0;\r\n    coverage: number = 0;\r\n    wrJustification: string = '';\r\n    grade: string = '';\r\n    presentation: string = '';\r\n    approval: string = '';\r\n    message: string = '';\r\n    totalReimbursement: number = 10000;\r\n    awardedReimbursement: number = 0;\r\n    availableReimbursement: number = 0;\r\n    constructor(){}\r\n}\r\n","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\user\\user.service.ts",[],"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\routing.component.tsx",[],"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\claimclass.component.tsx",[],"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\claim.service.ts",[],"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\user\\login.component.tsx",[],"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\table.component.tsx",[],"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\error.component.tsx",[],"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\add-claim.component.tsx",["100"],"import { SyntheticEvent } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { ClaimState } from '../reducer';\r\nimport './claim.css';\r\nimport claimService from './claim.service';\r\nimport { changeClaim } from '../actions';\r\nimport { Claim } from './claim';\r\nimport userService from '../user/user.service';\r\n\r\n\r\n// This is the prop I want to connect from redux\r\nconst claimProp = (state: ClaimState) => ({claim: state.claim});\r\n// This is the dispatcher I want to use from redux\r\nconst mapDispatch = {\r\n    updateClaim: (claim: Claim) => changeClaim(claim),\r\n};\r\n// Put them in the connector\r\nconst connector = connect(claimProp, mapDispatch);\r\n\r\n// Function Component\r\n// get the types of the props we created above so we can tell our component about them.\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nfunction AddClaimComponent(props: PropsFromRedux) {\r\n    const FIELDS = ['id', 'name', 'event_type', 'claim_date', 'event_start_date', 'location', 'description', 'cost', 'coverage', 'wrJustification', 'grade', 'presentation'];\r\n    const history = useHistory();\r\n    // This function is going to handle my onChange event.\r\n    // SyntheticEvent is how React simulates events.\r\n    function handleFormInput(e: SyntheticEvent) {\r\n        let c: any = { ...props.claim };\r\n            c[\r\n                (e.target as HTMLInputElement).id\r\n             \r\n            ] = Number((e.target as HTMLInputElement).value) || (e.target as HTMLInputElement).value;\r\n        props.updateClaim(c);\r\n        // this.setState({username: event.target.value});\r\n    }\r\n    function submitForm() {\r\n        claimService.addClaim(props.claim).then(() => {      //props.claim\r\n            props.updateClaim(new Claim());\r\n            // call the callback function from the parent component so that it will re-render\r\n            history.push('/claims');\r\n        });\r\n    }\r\n    return (\r\n            <div className='col claim card'>\r\n                {FIELDS.map((fieldName) => {\r\n                    return (\r\n                        <div key={'input-field-' + fieldName}>\r\n                            <label>{fieldName}</label>    \r\n                                <input\r\n                                type = 'text'\r\n                                className='form-control'\r\n                                name={fieldName}\r\n                                id={fieldName}\r\n                                value={(props.claim as any)[fieldName]}\r\n                                onChange={handleFormInput}\r\n                                ></input>\r\n                        </div>\r\n                    );\r\n                })}\r\n                <button className='btn btn-primary' onClick={submitForm}>\r\n                    Add Claim\r\n                </button>\r\n            </div>\r\n    );\r\n}\r\n\r\n//connect my prop and dispatcher to my component\r\nexport default connector(AddClaimComponent);\r\n","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\claimdetail.component.tsx",[],"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\thunks.ts",[],"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\claim-row.tsx",[],"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\claim.component.tsx",[],"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\about.component.tsx",[],"C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\approve-claim.component.tsx",["101"],"import { SyntheticEvent, useEffect } from 'react';\r\nimport './claim.css';\r\nimport claimService from './claim.service';\r\nimport {withRouter, useHistory} from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { ClaimState } from '../reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeClaim } from '../actions';\r\nimport { Claim } from './claim';\r\n\r\ninterface Params {\r\n    id: any;      //string\r\n}\r\n// Function Component\r\nfunction ApproveClaimComponent(props: RouteComponentProps<Params>) {\r\n    const claimSelector = (state: ClaimState) => state.claim;\r\n    const claim = useSelector(claimSelector);\r\n    const dispatch = useDispatch();\r\n    useEffect(()=>{\r\n        console.log(props);\r\n        console.log(props.match.params.id);\r\n        claimService.getClaim(Number(props.match.params.id)).then((rest)=> {\r\n            console.log(rest);\r\n            dispatch(changeClaim(rest));\r\n        })\r\n    }, [dispatch, props, (Number(props.match.params.id))]);\r\n    const FIELDS = ['id', 'name', 'event_type', 'cost','coverage', 'approval','message','totalReimbursement','awardedReimbursement','availableReimbursement'];\r\n    const history = useHistory();\r\n    // This function is going to handle my onChange event.\r\n    // SyntheticEvent is how React simulates events.\r\n    function handleFormInput(e: SyntheticEvent) {\r\n        let c: any = { ...claim };\r\n        if ((e.target as HTMLInputElement).id === 'cost') {\r\n            c.cost = (e.target as HTMLInputElement).value;\r\n        }else if ((e.target as HTMLInputElement).id === 'coverage') {\r\n            c.coverage = (e.target as HTMLInputElement).value;\r\n        }else if ((e.target as HTMLInputElement).id === 'totalReimbursement') {\r\n            c.totalReimbursement = (e.target as HTMLInputElement).value;\r\n        }            \r\n        c[\r\n            (e.target as HTMLInputElement).id     \r\n        ] = (e.target as HTMLInputElement).value ;\r\n\r\n        if ((e.target as HTMLInputElement).value === '1') {\r\n            c.awardedReimbursement = (c.cost * (c.coverage/100)) ;\r\n            c.availableReimbursement =  (c.totalReimbursement - c.awardedReimbursement) ;\r\n        }\r\n        dispatch(changeClaim(c));\r\n    }\r\n    function submitForm() {\r\n        claimService.updateClaim(claim).then(() => {\r\n            dispatch(changeClaim(new Claim()));\r\n            console.log('Updating claim!')\r\n            // call the callback function from the parent component so that it will re-render\r\n            history.push('/claims');\r\n        });\r\n    }\r\n    return (\r\n        <div className='col claim card'>\r\n            {FIELDS.map((fieldName) => {\r\n                return (\r\n                    <div key={'input-field-' + fieldName}>\r\n                        <label>{fieldName}</label>\r\n                            <input\r\n                                type='text'\r\n                                className='form-control'\r\n                                name={fieldName}\r\n                                id={fieldName}\r\n                                value={(claim as any)[fieldName]}\r\n                                onChange={handleFormInput}\r\n                                //placeholder='blabla'//{rest.fieldName}\r\n                        ></input>\r\n                    </div>\r\n                );\r\n            })}\r\n            <button className='btn btn-primary' onClick={submitForm}>\r\n                Approve Claim\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(ApproveClaimComponent);\r\n","C:\\Users\\Asad Nazir\\Desktop\\Revature_Training\\Revature_Git\\2012-dec14-react\\projectOne\\frontend\\src\\claim\\update-claim.component.tsx",["102"],"import { SyntheticEvent, useEffect } from 'react';\r\nimport './claim.css';\r\nimport claimService from './claim.service';\r\nimport {withRouter, useHistory} from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { ClaimState } from '../reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeClaim } from '../actions';\r\nimport { Claim } from './claim';\r\n\r\n\r\ninterface Params {\r\n    id: any;      //string\r\n}\r\n// Function Component\r\nfunction UpdateClaimComponent(props: RouteComponentProps<Params>) {\r\n    const claimSelector = (state: ClaimState) => state.claim;\r\n    const claim = useSelector(claimSelector);\r\n    const dispatch = useDispatch();\r\n    useEffect(()=>{\r\n        console.log(props);\r\n        console.log(props.match.params.id);\r\n        claimService.getClaim(Number(props.match.params.id)).then((rest)=> {\r\n            console.log(rest);\r\n            dispatch(changeClaim(rest));\r\n        })\r\n    }, [dispatch, props, (Number(props.match.params.id))]);\r\n    const FIELDS = ['id', 'name', 'event_type', 'claim_date', 'event_start_date', 'cost','grade','presentation','message'];\r\n    const history = useHistory();\r\n    // This function is going to handle my onChange event.\r\n    // SyntheticEvent is how React simulates events.\r\n    function handleFormInput(e: SyntheticEvent) {\r\n        let c: any = { ...claim };\r\n        c[\r\n            (e.target as HTMLInputElement).id     //.name\r\n        ] = (e.target as HTMLInputElement).value ;\r\n        dispatch(changeClaim(c));\r\n    }\r\n    function submitForm() {\r\n        claimService.updateClaim(claim).then(() => {\r\n            dispatch(changeClaim(new Claim()));\r\n            console.log('Updating claim!')\r\n            // call the callback function from the parent component so that it will re-render\r\n            history.push('/claims');\r\n        });\r\n    }\r\n    return (\r\n        <div className='col claim card'>\r\n            {FIELDS.map((fieldName) => {\r\n                return (\r\n                    <div key={'input-field-' + fieldName}>\r\n                        <label>{fieldName}</label>\r\n                            <input\r\n                                type='text'\r\n                                className='form-control'\r\n                                name={fieldName}\r\n                                id={fieldName}\r\n                                value={(claim as any)[fieldName]}\r\n                                onChange={handleFormInput}\r\n                        ></input>\r\n                    </div>\r\n                );\r\n            })}\r\n            <button className='btn btn-primary' onClick={submitForm}>\r\n                Update Claim\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(UpdateClaimComponent);\r\n",{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":14,"column":18,"nodeType":"109","messageId":"110","endLine":14,"endColumn":25},{"ruleId":"111","severity":1,"message":"112","line":19,"column":5,"nodeType":"113","messageId":"114","endLine":19,"endColumn":20},{"ruleId":"107","severity":1,"message":"115","line":9,"column":8,"nodeType":"109","messageId":"110","endLine":9,"endColumn":19},{"ruleId":"116","severity":1,"message":"117","line":26,"column":27,"nodeType":"118","endLine":26,"endColumn":56},{"ruleId":"116","severity":1,"message":"117","line":27,"column":27,"nodeType":"118","endLine":27,"endColumn":56},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"@typescript-eslint/no-unused-vars","'setCond' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'userService' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","no-global-assign","no-unsafe-negation"]